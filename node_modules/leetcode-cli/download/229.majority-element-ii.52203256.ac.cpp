/*
 * [229] Majority Element II
 *
 * https://leetcode.com/problems/majority-element-ii
 *
 * Medium (27.99%)
 * Total Accepted:    48729
 * Total Submissions: 174081
 * Testcase Example:  '[]'
 *
 * Given an integer array of size n, find all elements that appear more than
 * &lfloor; n/3 &rfloor; times. The algorithm should run in linear time and in
 * O(1) space.
 * 
 * 
 * How many majority elements could it possibly have?
 * Do you have a better hint? Suggest it!
 * 
 */
class Solution {
public:
    vector<int> majorityElement(vector<int>& nums) {
        int x,y;
        int nx = 0, ny = 0;
        for (auto i: nums) {
            if (nx == 0 && ny == 0) {
                x = i; ++nx;
            } else if (nx == 0) {
                if (i==y) ++ny;
                else { x=i; ++nx; }
            } else if (ny == 0) {
                if (i==x) ++nx;
                else { y=i; ++ny; }
            } else {
                if (i==x) ++nx;
                else if (i==y) ++ny;
                else { --nx; --ny; }
            }
        }
        vector<int> v;
        
        int k=nums.size()/3;
        int nx2=0, ny2=0;
        for (auto i:nums) {
            if (nx>0 && x==i) ++nx2;
            if (ny>0 && y==i) ++ny2;
        }
        if (nx2>k) v.push_back(x);
        if (ny2>k) v.push_back(y);
        return v;
    }
};

/*
 * [140] Word Break II
 *
 * https://leetcode.com/problems/word-break-ii
 *
 * Hard (22.49%)
 * Total Accepted:    80894
 * Total Submissions: 359628
 * Testcase Example:  '"catsanddog"\n["cat","cats","and","sand","dog"]'
 *
 * 
 * Given a non-empty string s and a dictionary wordDict containing a list of
 * non-empty words, add spaces in s to construct a sentence where each word is
 * a valid dictionary word. You may assume the dictionary does not contain
 * duplicate words.
 * 
 * 
 * 
 * Return all such possible sentences.
 * 
 * 
 * 
 * For example, given
 * s = "catsanddog",
 * dict = ["cat", "cats", "and", "sand", "dog"].
 * 
 * 
 * 
 * A solution is ["cats and dog", "cat sand dog"].
 * 
 * 
 * 
 * UPDATE (2017/1/4):
 * The wordDict parameter had been changed to a list of strings (instead of a
 * set of strings). Please reload the code definition to get the latest
 * changes.
 * 
 */
class Solution {
public:
    vector<string> wordBreak(string s, unordered_set<string> &dict) {
        vector<string> v;
        if (s.empty()) return v;
        for (unordered_set<string>::iterator it = dict.begin();
             it != dict.end();
             ++it) {
            if (s.substr(0,it->size()) == *it) {
                string s0 = *it;
                string s1 = s.substr(it->size());

                if (s1.empty()) {
                    v.push_back(s0);
                    continue;
                }

                map<string,vector<string> >::iterator it = cache.find(s1);
                if (it != cache.end()) {
                    int n = it->second.size();
                    if (n>0) {
                        for (int i=0; i<n; ++i) {
                            v.push_back(s0+" "+it->second[i]);
                        }
                    }
                    continue;
                }

                vector<string> res = wordBreak(s1, dict);
                cache[s1] = res;
                int n = res.size();
                if (n>0) {
                    for (int i=0; i<n; ++i) {
                        v.push_back(s0+" "+res[i]);
                    }
                }
            }
        }
        return v;
    }
    map<string,vector<string> > cache;
};

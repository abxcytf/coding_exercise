/*
 * [16] 3Sum Closest
 *
 * https://leetcode.com/problems/3sum-closest
 *
 * Medium (30.67%)
 * Total Accepted:    115429
 * Total Submissions: 376351
 * Testcase Example:  '[0,0,0]\n1'
 *
 * Given an array S of n integers, find three integers in S such that the sum
 * is closest to a given number, target. Return the sum of the three integers.
 * You may assume that each input would have exactly one solution.
 * 
 * 
 * For example, given array S = {-1 2 1 -4}, and target = 1.
 * 
 * The sum that is closest to the target is 2. (-1 + 2 + 1 = 2).
 * 
 */
class Solution {
public:
    int threeSumClosest(vector<int>& nums, int target) {
        int n = nums.size(), x = INT_MAX;
        if (n<3) return 0;
        
        sort(nums.begin(),nums.end());
        for (int i=0; i<n-2; ++i) {
            if (i>0 && nums[i]==nums[i-1]) continue;
            int j=i+1, k=n-1;
            while (j<k) {
                int s = nums[i]+nums[j]+nums[k];
                if (abs((long)x-target) > abs(s-target)) x = s;
                if (s==target) {
                    while (j<k && nums[j]==nums[j+1]) ++j;
                    while (j<k && nums[k]==nums[k-1]) --k;
                    ++j;--k;
                } else if (s>target) {
                    while (j<k && nums[k]==nums[k-1]) --k;
                    --k;
                } else {
                    while (j<k && nums[j]==nums[j+1]) ++j;
                    ++j;
                }
            }
        }
        return x;
    }
};

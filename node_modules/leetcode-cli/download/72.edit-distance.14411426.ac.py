#
# [72] Edit Distance
#
# https://leetcode.com/problems/edit-distance
#
# Hard (30.88%)
# Total Accepted:    80177
# Total Submissions: 259655
# Testcase Example:  '""\n""'
#
# 
# Given two words word1 and word2, find the minimum number of steps required to
# convert word1 to word2. (each operation is counted as 1 step.)
# 
# 
# 
# You have the following 3 operations permitted on a word:
# 
# 
# 
# a) Insert a character
# b) Delete a character
# c) Replace a character
# 
#
class Solution:
    # @return an integer
    def minDistance(self, s1, s2):
        self.cache = {}
        return self.find(s1,s2)

    def find(self,s1,s2):
        n1=len(s1)
        n2=len(s2)
        if n1==0 and n2==0: return 0
        if n1==0: return n2
        if n2==0: return n1
        v = None
        if (n1,n2) in self.cache:
            return self.cache[(n1,n2)]
        if s1[0] == s2[0]:
            v = self.find(s1[1:],s2[1:])
        else:
            v = 1+min(self.find(s1[1:],s2), self.find(s1,s2[1:]),self.find(s1[1:],s2[1:]))
        self.cache[(n1,n2)] = v
        return v

/*
 * [148] Sort List
 *
 * https://leetcode.com/problems/sort-list
 *
 * Medium (27.69%)
 * Total Accepted:    95975
 * Total Submissions: 346652
 * Testcase Example:  '[]'
 *
 * Sort a linked list in O(n log n) time using constant space complexity.
 */
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* sortList(ListNode* head) {
        if (!head || !head->next) return head;
        ListNode *p=head, *q=head;
        while (q && q->next && q->next->next) {
            p=p->next; q=q->next->next;
        }
        q=p->next;
        p->next=NULL;
        p=sortList(head);
        q=sortList(q);
        return merge(q,p);
    }
    
    ListNode* merge(ListNode *p, ListNode* q) {
        ListNode H(0); ListNode *x = &H;
        while (p && q) {
            if (p->val < q->val) {
                x->next=p; p=p->next; x=x->next;
            } else {
                x->next=q; q=q->next; x=x->next;
            }
        }
        if (p) x->next = p;
        if (q) x->next = q;
        return H.next;
    }
};

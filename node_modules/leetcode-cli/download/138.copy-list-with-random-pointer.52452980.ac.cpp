/*
 * [138] Copy List with Random Pointer
 *
 * https://leetcode.com/problems/copy-list-with-random-pointer
 *
 * Medium (26.58%)
 * Total Accepted:    100116
 * Total Submissions: 376580
 * Testcase Example:  '{}'
 *
 * 
 * A linked list is given such that each node contains an additional random
 * pointer which could point to any node in the list or null.
 * 
 * 
 * 
 * Return a deep copy of the list.
 * 
 */
/**
 * Definition for singly-linked list with a random pointer.
 * struct RandomListNode {
 *     int label;
 *     RandomListNode *next, *random;
 *     RandomListNode(int x) : label(x), next(NULL), random(NULL) {}
 * };
 */
class Solution {
public:
    RandomListNode *copyRandomList(RandomListNode *head) {
        RandomListNode *p=head;
        while (p!=NULL) {
            RandomListNode *x = new RandomListNode(p->label);
            x->random=p->random;
            x->next=p->next; p->next=x; p=x->next;
        }

        RandomListNode *p2;
        p=head;
        while (p!=NULL) {
            p2=p->next;
            if (p->random!=NULL)
                p2->random = p->random->next;
            p=p2->next;
        }

        RandomListNode H(0);
        p=head; p2=&H;
        while (p!=NULL) {
            p2->next=p->next; p2=p2->next;
            p->next=p2->next; p=p->next;
        }
        return H.next;        
    }
};

/*
 * [154] Find Minimum in Rotated Sorted Array II
 *
 * https://leetcode.com/problems/find-minimum-in-rotated-sorted-array-ii
 *
 * Hard (36.46%)
 * Total Accepted:    71545
 * Total Submissions: 196221
 * Testcase Example:  '[1]'
 *
 * 
 * Follow up for "Find Minimum in Rotated Sorted Array":
 * What if duplicates are allowed?
 * 
 * Would this affect the run-time complexity? How and why?
 * 
 * 
 * Suppose an array sorted in ascending order is rotated at some pivot unknown
 * to you beforehand.
 * 
 * (i.e., 0 1 2 4 5 6 7 might become 4 5 6 7 0 1 2).
 * 
 * Find the minimum element.
 * 
 * The array may contain duplicates.
 */
class Solution {
public:
    int findMin(vector<int> &num) {
        return findMin(num,0,num.size()-1);
    }
    int findMin(vector<int> &num, int l, int h) {
        int x = (l + h) / 2;
        //cout << l << "," << h << "=" << x << endl;
        if (x==l || x==h)
            return num[l] < num[h] ? num[l] : num[h];

        if (num[l] < num[h]) {
            if (num[x] >= num[h]) {
                return findMin(num,l,x);
            } else if (num[x] <= num[l]) {
                return findMin(num,x,h);
            } else {
                return num[l];
            }
        } else if (num[l] > num[h]) {
            if (num[x] >= num[l]) {
                return findMin(num,x,h);
            } else if (num[x] <= num[h]) {
                return findMin(num,l,x);
            } else {
                return num[h];
            }
        } else {
            int left = findMin(num,l,x);
            int right = findMin(num,x,h);
            return left < right ? left : right;
        }
    }
};

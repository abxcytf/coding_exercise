#
# [50] Pow(x, n)
#
# https://leetcode.com/problems/powx-n
#
# Medium (26.86%)
# Total Accepted:    136475
# Total Submissions: 508290
# Testcase Example:  '8.88023\n3'
#
# Implement pow(x, n).
# 
#
class Solution:
    # @param x, a float
    # @param n, a integer
    # @return a float
    def pow(self, x, n):
        if n>0:
            return self.cal(x,n)
        else:
            return 1.0/self.cal(x,-n)

    def cal(self,x,n):
        if x==1: return 1
        if n==0: return 1
        if n==1: return x
        y=self.cal(x,n/2)
        if n%2:
            return y*y*x
        else:
            return y*y

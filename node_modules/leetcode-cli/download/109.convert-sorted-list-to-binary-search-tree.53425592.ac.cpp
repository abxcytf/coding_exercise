/*
 * [109] Convert Sorted List to Binary Search Tree
 *
 * https://leetcode.com/problems/convert-sorted-list-to-binary-search-tree
 *
 * Medium (33.06%)
 * Total Accepted:    96751
 * Total Submissions: 292657
 * Testcase Example:  '[]'
 *
 * Given a singly linked list where elements are sorted in ascending order,
 * convert it to a height balanced BST.
 */
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    TreeNode* sortedListToBST(ListNode* head) {
        if (head==NULL) return NULL;
        int n = 0;
        for (ListNode *p=head;p!=NULL;p=p->next,++n);
        return sortedListToBST(head, n);
    }
    
    TreeNode* sortedListToBST(ListNode* p, int n) {
        if (p==NULL || n<=0) return NULL;
        if (n==1) return new TreeNode(p->val);
        ListNode *q = p;
        int x=n/2+1;
        for (int i=1; i<x; ++i) q=q->next;
        
        TreeNode *t = new TreeNode(q->val);
        t->left = sortedListToBST(p, x-1);
        t->right = sortedListToBST(q->next, n-x);
        return t;
    }
};

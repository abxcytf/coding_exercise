/*
 * [44] Wildcard Matching
 *
 * https://leetcode.com/problems/wildcard-matching
 *
 * Hard (19.34%)
 * Total Accepted:    84713
 * Total Submissions: 437984
 * Testcase Example:  '"aa"\n"a"'
 *
 * Implement wildcard pattern matching with support for '?' and '*'.
 * 
 * 
 * '?' Matches any single character.
 * '*' Matches any sequence of characters (including the empty sequence).
 * 
 * The matching should cover the entire input string (not partial).
 * 
 * The function prototype should be:
 * bool isMatch(const char *s, const char *p)
 * 
 * Some examples:
 * isMatch("aa","a") → false
 * isMatch("aa","aa") → true
 * isMatch("aaa","aa") → false
 * isMatch("aa", "*") → true
 * isMatch("aa", "a*") → true
 * isMatch("ab", "?*") → true
 * isMatch("aab", "c*a*b") → false
 * 
 */
class Solution {
public:
    unordered_map<const char*, unordered_map<const char*,bool>> c;
    bool isMatch(string s, string p) {
        c.clear();
        return match(s.c_str(), p.c_str());
    }

    bool match(const char* s, const char* p) {
        auto it = c.find(s);
        if (it!=c.end()) {
            auto it2 = it->second.find(p);
            if (it2!=it->second.end()) {
                //cout << s << "," << p << endl;
                return it2->second;
            }
        }
        bool ret=false;
        if (*p=='\0') ret = (*s == '\0');
        else if (*s=='\0' && *p!='*') ret = false;
        else if (*p=='*') {
            while (*p=='*') ++p;
            while (*s != '\0' && !match(s,p)) ++s;
            ret = (*s!='\0' || match(s,p));
        } else if (*s!='\0' && (*s==*p || *p=='?')) {
            ret = match(s+1, p+1);
        }

        c[s][p]=ret;
        return ret;
    }
};

#
# [132] Palindrome Partitioning II
#
# https://leetcode.com/problems/palindrome-partitioning-ii
#
# Hard (23.61%)
# Total Accepted:    65332
# Total Submissions: 276681
# Testcase Example:  '"aab"'
#
# 
# Given a string s, partition s such that every substring of the partition is a
# palindrome.
# 
# 
# Return the minimum cuts needed for a palindrome partitioning of s.
# 
# 
# For example, given s = "aab",
# Return 1 since the palindrome partitioning ["aa","b"] could be produced using
# 1 cut.
# 
#
class Solution:
    # @param s, a string
    # @return a list of lists of string
    def minCut(self, s):
        n=len(s)
        self.v = [[i] for i in range(n)]
        xx=[[0 for i in range(n)] for j in range(n)]
        for i in range(n):
            xx[i][i]=1
        for i in range(n-1,-1,-1):
            for j in range(i+1,n):
                if s[i] == s[j] and (i+1==j or xx[i+1][j-1] == 1):
                    xx[i][j] = 1
                    self.v[i].append(j)

        self.cache = {}
        return self.find(0,n) - 1

    def find(self,i,n):
        if i in self.cache:
            return self.cache[i]
        if i >= n:
            return 0
        c = n
        for x in self.v[i]:
            c1 = self.find(x+1,n)
            self.cache[x+1] = c1
            if c1+1 < c:
                c = c1+1
        return c

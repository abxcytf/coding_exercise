/*
 * [4] Median of Two Sorted Arrays
 *
 * https://leetcode.com/problems/median-of-two-sorted-arrays
 *
 * Hard (21.07%)
 * Total Accepted:    148440
 * Total Submissions: 704460
 * Testcase Example:  '[1,3]\n[2]'
 *
 * There are two sorted arrays nums1 and nums2 of size m and n respectively.
 * 
 * Find the median of the two sorted arrays. The overall run time complexity
 * should be O(log (m+n)).
 * 
 * Example 1:
 * 
 * nums1 = [1, 3]
 * nums2 = [2]
 * 
 * The median is 2.0
 * 
 * 
 * 
 * Example 2:
 * 
 * nums1 = [1, 2]
 * nums2 = [3, 4]
 * 
 * The median is (2 + 3)/2 = 2.5
 * 
 * 
 */
class Solution {
public:
    double x(vector<int> nums, int i, int j) {
        int mid = (i+j)/2;
        if (((j-i+1) & 1) == 1)
            return nums[mid];
        else
            return (nums[mid]+nums[mid+1])/2.0;
    }
    double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {
        int i1 = 0, j1 = nums1.size()-1;
        int i2 = 0, j2 = nums2.size()-1;
        int n;
        while (true) {
            if (i1>j1) {
                return x(nums2, i2, j2);
            } else if (i2>j2) {
                return x(nums1, i1, j1);
            }
            //cout << i1 << "," << j1 << "," << i2 << "," << j2 << endl;
            n = j1-i1+j2-i2+2;
            if (n==2) return (nums1[i1]+nums2[i2])/2.0;
            n /= 4;
            if (n==0) n = 1;
            
            int mid1 = (i1+j1)/2;
            int mid2 = (i2+j2)/2;
            if (nums1[mid1] < nums2[mid2]) {
                i1 += n; j2 -= n;
            } else if (nums1[mid1] > nums2[mid2]){
                j1 -= n; i2 += n;
            } else {
                if (nums1[i1] <= nums2[i2]) i1+=1; else i2+=1;
                if (nums1[j1] >= nums2[j2]) j1-=1; else j2-=1;
            }
        }
    }
};

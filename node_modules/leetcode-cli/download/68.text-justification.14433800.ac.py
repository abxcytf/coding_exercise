#
# [68] Text Justification
#
# https://leetcode.com/problems/text-justification
#
# Hard (18.37%)
# Total Accepted:    49752
# Total Submissions: 270747
# Testcase Example:  '[""]\n0'
#
# 
# Given an array of words and a length L, format the text such that each line
# has exactly L characters and is fully (left and right) justified.
# 
# 
# 
# You should pack your words in a greedy approach; that is, pack as many words
# as you can in each line. Pad extra spaces ' ' when necessary so that each
# line has exactly L characters.
# 
# 
# 
# Extra spaces between words should be distributed as evenly as possible. If
# the number of spaces on a line do not divide evenly between words, the empty
# slots on the left will be assigned more spaces than the slots on the
# right.
# 
# 
# 
# For the last line of text, it should be left justified and no extra space is
# inserted between words.
# 
# 
# 
# For example,
# words: ["This", "is", "an", "example", "of", "text", "justification."]
# L: 16.
# 
# 
# 
# Return the formatted lines as:
# 
# [
# "This    is    an",
# "example  of text",
# "justification.  "
# ]
# 
# 
# 
# 
# Note: Each word is guaranteed not to exceed L in length.
# 
# 
# 
# click to show corner cases.
# 
# Corner Cases:
# 
# 
# A line other than the last line might contain only one word. What should you
# do in this case?
# In this case, that line should be left-justified.
# 
# 
#
class Solution:
    # @param words, a list of strings
    # @param L, an integer
    # @return a list of strings
    def fullJustify(self, words, L):
        vv=[]
        v=[]
        n = 0
        for i in words:
            if n+len(i) <= L:
                v.append(i)
                n+=len(i)+1
                continue
            vv.append(self.find(v,L))
            v=[i]
            n=len(i)+1
        if len(v)>0:
            vv.append(self.find2(v,L))
        return vv

    def find2(self,v,L):
        s=' '.join(v)
        return s+' '*(L-len(s))

    def find(self,v,L):
        diff = L - sum([len(x) for x in v])
        n = (len(v)-1)
        if n==0:
            return v[0] + ' '*diff
        x=diff / n
        x2=diff % n
        v1 = [' '*x]*n + ['']
        while x2>0:
            x2-=1
            v1[x2]+=' '
        return ''.join([x+y for x,y in zip(v,v1)])

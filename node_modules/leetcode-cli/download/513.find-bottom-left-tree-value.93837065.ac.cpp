/*
 * [513] Find Bottom Left Tree Value
 *
 * https://leetcode.com/problems/find-bottom-left-tree-value
 *
 * Medium (53.64%)
 * Total Accepted:    4465
 * Total Submissions: 8090
 * Testcase Example:  '[2,1,3]'
 *
 * 
 * Given a binary tree, find the leftmost value in the last row of the tree. 
 * 
 * 
 * Example 1:
 * 
 * Input:
 * 
 * 2
 * / \
 * 1   3
 * 
 * Output:
 * 1
 * 
 * 
 * 
 * Example 2: 
 * 
 * Input:
 * 
 * 1
 * / \
 * 2   3
 * /   / \
 * 4   5   6
 * /
 * 7
 * 
 * Output:
 * 7
 * 
 * 
 * 
 * Note:
 * You may assume the tree (i.e., the given root node) is not NULL.
 * 
 */
/*
 * [513] Find Bottom Left Tree Value
 *
 * https://leetcode.com/problems/find-bottom-left-tree-value
 *
 * Medium (53.64%)
 * Total Accepted:    4465
 * Total Submissions: 8090
 * Testcase Example:  '[2,1,3]'
 *
 * 
 * Given a binary tree, find the leftmost value in the last row of the tree. 
 * 
 * 
 * Example 1:
 * 
 * Input:
 * 
 * 2
 * / \
 * 1   3
 * 
 * Output:
 * 1
 * 
 * 
 * 
 * Example 2: 
 * 
 * Input:
 * 
 * 1
 * / \
 * 2   3
 * /   / \
 * 4   5   6
 * /
 * 7
 * 
 * Output:
 * 7
 * 
 * 
 * 
 * Note:
 * You may assume the tree (i.e., the given root node) is not NULL.
 * 
 */
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    int findBottomLeftValue(TreeNode* root) {
        queue<TreeNode*> q;
        q.push(root);

        int cnt = 1, nextCnt = 0, x = root->val;
        TreeNode* p;

        while(!q.empty()) {
            p = q.front();
            q.pop();

            if (p->left) {
                q.push(p->left);
                ++nextCnt;
            }

            if (p->right) {
                q.push(p->right);
                ++nextCnt;
            }

            if (--cnt == 0) {
                cnt = nextCnt;
                nextCnt = 0;
                if (!q.empty()) x = q.front()->val;
            }
        }
        return x;
    }
};


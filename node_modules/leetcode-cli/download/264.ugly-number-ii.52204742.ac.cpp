/*
 * [264] Ugly Number II
 *
 * https://leetcode.com/problems/ugly-number-ii
 *
 * Medium (31.82%)
 * Total Accepted:    52216
 * Total Submissions: 164088
 * Testcase Example:  '1'
 *
 * 
 * Write a program to find the n-th ugly number.
 * 
 * 
 * 
 * Ugly numbers are positive numbers whose prime factors only include 2, 3, 5.
 * For example, 1, 2, 3, 4, 5, 6, 8, 9, 10, 12 is the sequence of the first 10
 * ugly numbers.
 * 
 * 
 * 
 * Note that 1 is typically treated as an ugly number, and n does not exceed
 * 1690.
 * 
 * 
 * 
 * The naive approach is to call isUgly for every number until you reach the
 * nth one. Most numbers are not ugly. Try to focus your effort on generating
 * only the ugly ones.
 * An ugly number must be multiplied by either 2, 3, or 5 from a smaller ugly
 * number.
 * The key is how to maintain the order of the ugly numbers. Try a similar
 * approach of merging from three sorted lists: L1, L2, and L3.
 * Assume you have Uk, the kth ugly number. Then Uk+1 must be Min(L1 * 2, L2 *
 * 3, L3 * 5).
 * 
 * 
 * Credits:Special thanks to @jianchao.li.fighter for adding this problem and
 * creating all test cases.
 */
class Solution {
public:
    int nthUglyNumber(int n) {
        vector<int> v = {1};
        int p2=0,p3=0,p5=0;
        while (v.size() < n) {
            int v2=v[p2]*2,v3=v[p3]*3,v5=v[p5]*5;
            int x = min(v2,min(v3,v5));
            //cout << x << endl;
            v.push_back(x);
            if (x==v2) ++p2;
            if (x==v3) ++p3;
            if (x==v5) ++p5;
        }
        return v[n-1];
    }
};

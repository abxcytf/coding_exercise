/*
 * [8] String to Integer (atoi)
 *
 * https://leetcode.com/problems/string-to-integer-atoi
 *
 * Medium (13.88%)
 * Total Accepted:    153722
 * Total Submissions: 1107789
 * Testcase Example:  '""'
 *
 * Implement atoi to convert a string to an integer.
 * 
 * Hint: Carefully consider all possible input cases. If you want a challenge,
 * please do not see below and ask yourself what are the possible input
 * cases.
 * 
 * 
 * Notes: 
 * It is intended for this problem to be specified vaguely (ie, no given input
 * specs). You are responsible to gather all the input requirements up
 * front. 
 * 
 * 
 * Update (2015-02-10):
 * The signature of the C++ function had been updated. If you still see your
 * function signature accepts a const char * argument, please click the reload
 * button  to reset your code definition.
 * 
 * 
 * spoilers alert... click to show requirements for atoi.
 * 
 * Requirements for atoi:
 * 
 * The function first discards as many whitespace characters as necessary until
 * the first non-whitespace character is found. Then, starting from this
 * character, takes an optional initial plus or minus sign followed by as many
 * numerical digits as possible, and interprets them as a numerical value.
 * 
 * The string can contain additional characters after those that form the
 * integral number, which are ignored and have no effect on the behavior of
 * this function.
 * 
 * If the first sequence of non-whitespace characters in str is not a valid
 * integral number, or if no such sequence exists because either str is empty
 * or it contains only whitespace characters, no conversion is performed.
 * 
 * If no valid conversion could be performed, a zero value is returned. If the
 * correct value is out of the range of representable values, INT_MAX
 * (2147483647) or INT_MIN (-2147483648) is returned.
 * 
 * 
 */
class Solution {
public:
    int myAtoi(string s) {
        int i=0, n=s.size(),v=0;
        while (i<n && ::isspace(s[i])) ++i;
        if (i==n) return v;
        
        int sign = 1, last;
        if (s[i]=='+') ++i;
        else if (s[i]=='-') { ++i; sign=-1; }
        while (i<n) {
            if (s[i]>'9' || s[i]<'0') return v;
            last=v;
            v = v*10 + sign*(s[i]-'0');
            if (v/10 != last)
                return (sign==1) ? 2147483647: -2147483648;
            ++i;
        }
        return sign?v:-v;
    }
};

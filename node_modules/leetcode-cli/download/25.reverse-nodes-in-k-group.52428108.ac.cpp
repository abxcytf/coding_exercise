/*
 * [25] Reverse Nodes in k-Group
 *
 * https://leetcode.com/problems/reverse-nodes-in-k-group
 *
 * Hard (29.99%)
 * Total Accepted:    84612
 * Total Submissions: 282067
 * Testcase Example:  '[]\n1'
 *
 * 
 * Given a linked list, reverse the nodes of a linked list k at a time and
 * return its modified list.
 * 
 * 
 * 
 * k is a positive integer and is less than or equal to the length of the
 * linked list. If the number of nodes is not a multiple of k then left-out
 * nodes in the end should remain as it is.
 * 
 * You may not alter the values in the nodes, only nodes itself may be
 * changed.
 * 
 * Only constant memory is allowed.
 * 
 * 
 * For example,
 * Given this linked list: 1->2->3->4->5
 * 
 * 
 * 
 * For k = 2, you should return: 2->1->4->3->5
 * 
 * 
 * 
 * For k = 3, you should return: 3->2->1->4->5
 * 
 */
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* reverseKGroup(ListNode* head, int k) {
        ListNode *p=head, *p2, *t;
        int n=0;
        while (p!=NULL) { p=p->next; ++n; }
        if (n<2) return head;
        if (k>n) return head;

        ListNode H(0); H.next=head;
        p=&H;
        for (int i=0; i+k-1<n; i+=k) {
            t=p->next;
            for (int j=1; j<k; ++j) {
                p2=t->next;
                t->next=p2->next;
                p2->next=p->next;
                p->next=p2;
            }
            p=t;
        }
        return H.next;        
    }
};

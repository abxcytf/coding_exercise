/*
 * [22] Generate Parentheses
 *
 * https://leetcode.com/problems/generate-parentheses
 *
 * Medium (42.62%)
 * Total Accepted:    131413
 * Total Submissions: 308324
 * Testcase Example:  '3'
 *
 * 
 * Given n pairs of parentheses, write a function to generate all combinations
 * of well-formed parentheses.
 * 
 * 
 * 
 * For example, given n = 3, a solution set is:
 * 
 * 
 * [
 * "((()))",
 * "(()())",
 * "(())()",
 * "()(())",
 * "()()()"
 * ]
 * 
 */
class Solution {
public:
    void find(vector<string> &v, int n, int l, int r, int x, string &s) {
        if (n==0) {
            v.push_back(s);
            return;
        }
        for (int j = 0;j<2;++j) {
            if (j==0) {
                if (l>0) {
                    s.push_back('(');
                    find(v,n-1,l-1,r,x+1,s);
                    s.erase(s.size()-1);
                }
            } else {
                if (r>0 && x>0) {
                    s.push_back(')');
                    find(v,n-1,l,r-1,x-1,s);
                    s.erase(s.size()-1);
                }
            }
        }
    }
    vector<string> generateParenthesis(int n) {
        vector<string> v;
        string s;
        find(v,2*n,n,n,0,s);
        return v;
    }
};

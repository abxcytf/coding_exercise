/*
 * [330] Patching Array
 *
 * https://leetcode.com/problems/patching-array
 *
 * Hard (31.65%)
 * Total Accepted:    19617
 * Total Submissions: 61977
 * Testcase Example:  '[1,3]\n6'
 *
 * Given a sorted positive integer array nums and an integer n, add/patch
 * elements to the array such that any number in range [1, n] inclusive can be
 * formed by the sum of some elements in the array. Return the minimum number
 * of patches required.
 * 
 * 
 * Example 1:
 * nums = [1, 3], n = 6
 * Return 1.
 * 
 * Combinations of nums are [1], [3], [1,3], which form possible sums of: 1, 3,
 * 4.
 * Now if we add/patch 2 to nums, the combinations are: [1], [2], [3], [1,3],
 * [2,3], [1,2,3].
 * Possible sums are 1, 2, 3, 4, 5, 6, which now covers the range [1, 6].
 * So we only need 1 patch.
 * 
 * Example 2:
 * nums = [1, 5, 10], n = 20
 * Return 2.
 * The two patches can be [2, 4].
 * 
 * Example 3:
 * nums = [1, 2, 2], n = 5
 * Return 0.
 * 
 * Credits:Special thanks to @dietpepsi for adding this problem and creating
 * all test cases.
 */
class Solution {
public:
    int minPatches(vector<int>& nums, int n) {
        vector<int> A(n+1, 0);
        A[0] = 1;
        
        int todo = n, i;
        for (auto x: nums) {
            for (i=n-x; i>=0; --i) {
                if (A[i] && !A[x+i]) {
                    A[x+i]=1; --todo;
                }
            }
        }
        
        int need = 0;
        while (todo > 0) {
            int x;
            for (x=1; x<n; ++x) {
                if (!A[x]) break;
            }
            for (i=n-x; i>=0; --i) {
                if (A[i] && !A[x+i]) {
                    A[x+i]=1; --todo;
                }
            }
            ++need;
        }
        return need;
    }
};

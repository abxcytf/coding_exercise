/*
 * [216] Combination Sum III
 *
 * https://leetcode.com/problems/combination-sum-iii
 *
 * Medium (42.86%)
 * Total Accepted:    59367
 * Total Submissions: 138497
 * Testcase Example:  '3\n7'
 *
 * 
 * Find all possible combinations of k numbers that add up to a number n, given
 * that only numbers from 1 to 9 can be used and each combination should be a
 * unique set of numbers.
 * 
 * 
 * 
 * Example 1:
 * Input:  k = 3,  n = 7
 * Output: 
 * 
 * [[1,2,4]]
 * 
 * 
 * Example 2:
 * Input:  k = 3,  n = 9
 * Output: 
 * 
 * [[1,2,6], [1,3,5], [2,3,4]]
 * 
 * 
 * 
 * Credits:Special thanks to @mithmatt for adding this problem and creating all
 * test cases.
 */
class Solution {
public:
    vector<vector<int>> vv;
    vector<vector<int>> combinationSum3(int k, int n) {
        vector<int> v(k);
        DFS(v, 0, 0, k, n);
        return vv;
    }
    void DFS(vector<int> &v, int i, int m, int k, int n) {
        if (i==k-1) {
            v[i] = n-m;
            if (v[i] > 9) return;
            if (i > 0 && v[i] <= v[i-1]) return;
            vv.push_back(v);
            return;
        }
        v[i] = i > 0 ? v[i-1] : 0;
        while (true) {
            ++v[i];
            if (v[i] > 9 || m+v[i]>n) return;
            DFS(v, i+1, m+v[i], k, n);
        }
    }
};

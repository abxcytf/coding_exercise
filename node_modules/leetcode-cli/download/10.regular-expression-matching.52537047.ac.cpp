/*
 * [10] Regular Expression Matching
 *
 * https://leetcode.com/problems/regular-expression-matching
 *
 * Hard (23.82%)
 * Total Accepted:    123863
 * Total Submissions: 519972
 * Testcase Example:  '"aa"\n"a"'
 *
 * Implement regular expression matching with support for '.' and '*'.
 * 
 * 
 * '.' Matches any single character.
 * '*' Matches zero or more of the preceding element.
 * 
 * The matching should cover the entire input string (not partial).
 * 
 * The function prototype should be:
 * bool isMatch(const char *s, const char *p)
 * 
 * Some examples:
 * isMatch("aa","a") → false
 * isMatch("aa","aa") → true
 * isMatch("aaa","aa") → false
 * isMatch("aa", "a*") → true
 * isMatch("aa", ".*") → true
 * isMatch("ab", ".*") → true
 * isMatch("aab", "c*a*b") → true
 * 
 */
class Solution {
public:
    bool isMatch(string s, string p) {
        return match(s.c_str(), p.c_str());
    }

    bool match(const char* s, const char* p) {
        if (*p=='\0') return  *s == '\0';
        if (*(p+1)=='*') {
            if (*s=='\0') {
                if (*s!=*p && *p!='.') return match(s,p+2);
                else return match(s,p+2);
            } else {
                if (*s!=*p && *p!='.') return match(s,p+2);
                return match(s,p+2) || match(s+1,p);
            }
        } else {
            if (*s=='\0') return false;
            if (*s!=*p && *p!='.') return false;
            return match(s+1, p+1);
        }       
    }
};

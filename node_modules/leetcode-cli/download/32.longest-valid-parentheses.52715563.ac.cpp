/*
 * [32] Longest Valid Parentheses
 *
 * https://leetcode.com/problems/longest-valid-parentheses
 *
 * Hard (23.07%)
 * Total Accepted:    87272
 * Total Submissions: 378310
 * Testcase Example:  '""'
 *
 * Given a string containing just the characters '(' and ')', find the length
 * of the longest valid (well-formed) parentheses substring.
 * 
 * 
 * For "(()", the longest valid parentheses substring is "()", which has length
 * = 2.
 * 
 * 
 * Another example is ")()())", where the longest valid parentheses substring
 * is "()()", which has length = 4.
 * 
 */
class Solution {
public:
    inline bool isleft(char c) { return c=='(' || c=='[' || c=='{'; }
    inline bool isright(char c) { return c==')' || c==']' || c=='}'; }
    inline bool ismatch(char c1, char c2) {
        return (c1=='(' && c2==')') || (c1=='[' && c2==']') || (c1=='{' && c2=='}');
    }

    int longestValidParentheses(string s) {
        size_t max_x = 0;
        stack<int> sc;
        for (size_t i=0,n=s.size(); i<n; ++i) {
            if (isleft(s[i])) {
                sc.push(i);
            } else if (isright(s[i])) {
                if (sc.empty() || !ismatch(s[sc.top()],s[i])) {
                    sc.push(i);
                    continue;
                }
                sc.pop();
                if (sc.empty()) max_x=max(max_x,i+1);
                else max_x=max(max_x, i-sc.top());
                //cout << i << ", max=" << max_x << endl;
            }
        }
        return max_x;
    }
};

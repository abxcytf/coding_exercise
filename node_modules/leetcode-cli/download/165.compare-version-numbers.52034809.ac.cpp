/*
 * [165] Compare Version Numbers
 *
 * https://leetcode.com/problems/compare-version-numbers
 *
 * Medium (19.47%)
 * Total Accepted:    78600
 * Total Submissions: 403634
 * Testcase Example:  '"1"\n"0"'
 *
 * Compare two version numbers version1 and version2.
 * If version1 &gt; version2 return 1, if version1 &lt; version2 return -1,
 * otherwise return 0.
 * 
 * You may assume that the version strings are non-empty and contain only
 * digits and the . character.
 * The . character does not represent a decimal point and is used to separate
 * number sequences.
 * For instance, 2.5 is not "two and a half" or "half way to version three", it
 * is the fifth second-level revision of the second first-level revision.
 * 
 * Here is an example of version numbers ordering:
 * 0.1 &lt; 1.1 &lt; 1.2 &lt; 13.37
 * 
 * Credits:Special thanks to @ts for adding this problem and creating all test
 * cases.
 */
class Solution {
public:
    
    int compareVersion(string v1, string v2) {
        size_t b1=0,e1,b2=0,e2,n1=v1.size(),n2=v2.size();
        while (b1<n1 && b2<n2) {
            while(b1<n1 && v1[b1]=='0') ++b1;
            e1 = v1.find('.',b1);
            if (e1 == string::npos) e1 = n1;
            while(b2<n2 && v2[b2]=='0') ++b2;
            e2 = v2.find('.', b2);
            if (e2 == string::npos) e2 = n2;
            if (e1-b1>e2-b2) return 1;
            if (e1-b1<e2-b2) return -1;
            //cout << b1<<","<<e1 << " vs. " << b2<<"," << e2 << endl;
            for (int i=0;i<e1-b1;++i) {
                if (v1[b1+i]>v2[b2+i]) return 1;
                if (v1[b1+i]<v2[b2+i]) return -1;
            }
            b1=e1+1;b2=e2+1;
        }
        //cout << n1 << " and " << n2 << endl;
        while(b1<n1 && (v1[b1]=='0' || v1[b1]=='.')) ++b1;
        while(b2<n2 && (v2[b2]=='0' || v2[b2]=='.')) ++b2;
        if (b1<n1) return 1;
        if (b2<n2) return -1;
        return 0;
    }
};

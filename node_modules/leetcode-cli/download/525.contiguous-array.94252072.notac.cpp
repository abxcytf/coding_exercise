/*
 * [525] Contiguous Array
 *
 * https://leetcode.com/problems/contiguous-array
 *
 * Medium (26.90%)
 * Total Accepted:    1761
 * Total Submissions: 6500
 * Testcase Example:  '[0,1]'
 *
 * Given a binary array, find the maximum length of a contiguous subarray with
 * equal number of 0 and 1. 
 * 
 * 
 * Example 1:
 * 
 * Input: [0,1]
 * Output: 2
 * Explanation: [0, 1] is the longest contiguous subarray with equal number of
 * 0 and 1.
 * 
 * 
 * 
 * Example 2:
 * 
 * Input: [0,1,0]
 * Output: 2
 * Explanation: [0, 1] (or [1, 0]) is a longest contiguous subarray with equal
 * number of 0 and 1.
 * 
 * 
 * 
 * Note:
 * The length of the given binary array will not exceed 50,000.
 * 
 */
/*
 * [525] Contiguous Array
 *
 * https://leetcode.com/problems/contiguous-array
 *
 * Medium (26.90%)
 * Total Accepted:    1761
 * Total Submissions: 6500
 * Testcase Example:  '[0,1]'
 *
 * Given a binary array, find the maximum length of a contiguous subarray with
 * equal number of 0 and 1. 
 * 
 * 
 * Example 1:
 * 
 * Input: [0,1]
 * Output: 2
 * Explanation: [0, 1] is the longest contiguous subarray with equal number of
 * 0 and 1.
 * 
 * 
 * 
 * Example 2:
 * 
 * Input: [0,1,0]
 * Output: 2
 * Explanation: [0, 1] (or [1, 0]) is a longest contiguous subarray with equal
 * number of 0 and 1.
 * 
 * 
 * 
 * Note:
 * The length of the given binary array will not exceed 50,000.
 * 
 */
class Solution {
public:
    int findMaxLength(vector<int>& nums) {
        int n = nums.size();
        
        int x = 0;
        for (auto v : nums)
            x += (v ? 1 : -1);

        int i = 0, j = n-1;
        while (i < j) {
            if (x == 0)
                return j-i+1;
            else if (x > 0) {
                if (nums[i] == 1) {
                    --x; ++i;
                } else if (nums[j] == 1) {
                    --x; --j;
                } else {
                    ++x; ++i;
                }
            } else {
                // x < 0
                if (nums[i] == 0) {
                    ++x; ++i;
                } else if (nums[j] == 0) {
                    ++x; --j;
                } else {
                    --x; ++i;
                }
            
            }
        }
        return 0;
    }
};


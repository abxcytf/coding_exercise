/*
 * [145] Binary Tree Postorder Traversal
 *
 * https://leetcode.com/problems/binary-tree-postorder-traversal
 *
 * Hard (38.89%)
 * Total Accepted:    130827
 * Total Submissions: 336357
 * Testcase Example:  '[]'
 *
 * Given a binary tree, return the postorder traversal of its nodes' values.
 * 
 * 
 * For example:
 * Given binary tree {1,#,2,3},
 * 
 * 1
 * \
 * 2
 * /
 * 3
 * 
 * 
 * 
 * return [3,2,1].
 * 
 * 
 * Note: Recursive solution is trivial, could you do it iteratively?
 */
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    vector<int> postorderTraversal(TreeNode* root) {
        vector<int> v;
        stack<TreeNode*> s;
        if (root!=NULL) s.push(root);
        TreeNode* last = NULL;
        while (!s.empty()) {
            TreeNode* p = s.top(); s.pop();
            if ((last != NULL && (p->left==last || p->right==last)) ||
                (p->left==NULL && p->right==NULL)) {
                v.push_back(p->val); last = p;
            } else {
                s.push(p);
                if (p->right) s.push(p->right);
                if (p->left) s.push(p->left);
            }
        }
        return v;
    }
};

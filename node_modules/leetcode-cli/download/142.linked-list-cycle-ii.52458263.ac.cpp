/*
 * [142] Linked List Cycle II
 *
 * https://leetcode.com/problems/linked-list-cycle-ii
 *
 * Medium (31.02%)
 * Total Accepted:    104626
 * Total Submissions: 337296
 * Testcase Example:  '[]\nno cycle'
 *
 * 
 * Given a linked list, return the node where the cycle begins. If there is no
 * cycle, return null.
 * 
 * 
 * 
 * Note: Do not modify the linked list.
 * 
 * 
 * Follow up:
 * Can you solve it without using extra space?
 * 
 */
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode *detectCycle(ListNode *head) {
        ListNode *p=head, *p2=head;
        while (p!=NULL && p2!=NULL && p2->next!=NULL) {
            p=p->next; p2=p2->next->next;
            if (p==p2) {
                p=head;
                while (p!=p2) {
                    p=p->next; p2=p2->next;
                }
                return p;
            }
        }
        return NULL;        
    }
};

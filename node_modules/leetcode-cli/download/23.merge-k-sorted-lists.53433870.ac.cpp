/*
 * [23] Merge k Sorted Lists
 *
 * https://leetcode.com/problems/merge-k-sorted-lists
 *
 * Hard (26.35%)
 * Total Accepted:    133130
 * Total Submissions: 505228
 * Testcase Example:  '[]'
 *
 * 
 * Merge k sorted linked lists and return it as one sorted list. Analyze and
 * describe its complexity.
 * 
 */
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    struct MyComp {
        bool operator()(const ListNode* l, const ListNode* r) const {
            return l->val > r->val;
        }  
    };
    ListNode* mergeKLists(vector<ListNode*>& lists) {
        vector<ListNode*> h;
        for (auto &p : lists) {
            if (p!=NULL) h.push_back(p);
        }
        make_heap(h.begin(), h.end(), MyComp());
        
        ListNode H(0); ListNode *x=&H;
        while (!h.empty()) {
            pop_heap(h.begin(), h.end(), MyComp());
            ListNode *p = h.back(); h.pop_back();
            x->next=p; p=p->next; x=x->next;
            if (p!=NULL) {
                h.push_back(p);
                push_heap(h.begin(), h.end(), MyComp());
            }
        }
        return H.next;
    }
};

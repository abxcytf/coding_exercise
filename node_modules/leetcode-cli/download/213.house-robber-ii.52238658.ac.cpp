/*
 * [213] House Robber II
 *
 * https://leetcode.com/problems/house-robber-ii
 *
 * Medium (33.33%)
 * Total Accepted:    49614
 * Total Submissions: 148870
 * Testcase Example:  '[]'
 *
 * Note: This is an extension of House Robber.
 * 
 * After robbing those houses on that street, the thief has found himself a new
 * place for his thievery so that he will not get too much attention. This
 * time, all houses at this place are arranged in a circle. That means the
 * first house is the neighbor of the last one. Meanwhile, the security system
 * for these houses remain the same as for those in the previous street. 
 * 
 * Given a list of non-negative integers representing the amount of money of
 * each house, determine the maximum amount of money you can rob tonight
 * without alerting the police.
 * 
 * Credits:Special thanks to @Freezen for adding this problem and creating all
 * test cases.
 */
class Solution {
public:
    vector<int> v,c;
    int rob(vector<int>& nums) {
        int n = nums.size();
        if (n==0) return 0;
        v.resize(n); c.resize(n);
        int x = find(nums), t = 0;
        if (n>1 && c[0]==1 && c[n-1]==1) {
            x=0;
            swap(nums[0],t);
            x=max(x, find(nums));
            swap(nums[0],t);
            
            swap(nums[n-1],t);
            x=max(x, find(nums));
        }
        return x;
    }
    
    int find(vector<int>& nums) {
        int n = nums.size();
        for (int i=0; i<n; ++i) {
            c[i] = 0;
            if (i==0) {v[i]=nums[i]; c[i]=1; }
            if (i>=1) {
                if (nums[i] < v[i-1]) { v[i]=v[i-1]; c[i]=0; }
                else { v[i]=nums[i]; c[i]=1; }
            }
            if (i>=2) {
                if (v[i] < v[i-2]+nums[i]) { v[i]=v[i-2]+nums[i]; c[i]=1; }
            }
            //cout << v[i] << endl;
        }
        return v[n-1];
    }
};

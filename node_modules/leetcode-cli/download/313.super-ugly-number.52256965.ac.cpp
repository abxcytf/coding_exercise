/*
 * [313] Super Ugly Number
 *
 * https://leetcode.com/problems/super-ugly-number
 *
 * Medium (37.19%)
 * Total Accepted:    32111
 * Total Submissions: 86344
 * Testcase Example:  '1\n[2,3,5]'
 *
 * 
 * Write a program to find the nth super ugly number.
 * 
 * 
 * 
 * Super ugly numbers are positive numbers whose all prime factors are in the
 * given prime list
 * primes of size k. For example, [1, 2, 4, 7, 8, 13, 14, 16, 19, 26, 28, 32]
 * is the sequence of the first 12 super ugly numbers given primes
 * = [2, 7, 13, 19] of size 4.
 * 
 * 
 * 
 * Note:
 * (1) 1 is a super ugly number for any given primes.
 * (2) The given numbers in primes are in ascending order.
 * (3) 0 < k &le; 100, 0 < n &le; 106, 0 < primes[i] < 1000.
 * (4) The nth super ugly number is guaranteed to fit in a 32-bit signed
 * integer.
 * 
 * 
 * Credits:Special thanks to @dietpepsi for adding this problem and creating
 * all test cases.
 */
class Solution {
public:
    struct Comp {
        bool operator()(const pair<int,int> &p1, const pair<int,int> &p2) const
        {
            return p1.first < p2.first;
        }
    };
    int nthSuperUglyNumber(int n, vector<int>& primes) {
        int pn = primes.size();
        
        vector<int> pos(pn);
        for (int i=0; i<pn; ++i) pos[i]=0;
        
        set<pair<int,int>, Comp> s;
        for (int i=0; i<pn; ++i) s.insert(make_pair(primes[i],i));
        
        vector<int> v = {1};
        while (v.size()<n) {
            auto it = s.begin();
            int x = it->first, i = it->second;
            s.erase(it);

            v.push_back(x);
            int next = 0;
            while (true) {
                next=v[++pos[i]]*primes[i];
                if (s.find(make_pair(next,i)) == s.end()) break;
            }
            s.insert(make_pair(next,i));
            //cout << x << endl;
        }
        return v[n-1];
    }
};

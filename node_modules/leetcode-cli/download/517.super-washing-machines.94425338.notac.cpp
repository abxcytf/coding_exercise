/*
 * [517] Super Washing Machines
 *
 * https://leetcode.com/problems/super-washing-machines
 *
 * Hard (33.53%)
 * Total Accepted:    1214
 * Total Submissions: 3597
 * Testcase Example:  '[1,0,5]'
 *
 * You have n super washing machines on a line. Initially, each washing machine
 * has some dresses or is empty. 
 * 
 * 
 * For each move, you could choose any m (1 ≤ m ≤ n) washing machines, and pass
 * one dress of each washing machine to one of its adjacent washing machines
 * at the same time .  
 * 
 * Given an integer array representing the number of dresses in each washing
 * machine from left to right on the line, you should find the minimum number
 * of moves to make all the washing machines have the same number of dresses.
 * If it is not possible to do it, return -1.
 * 
 * Example1
 * 
 * Input: [1,0,5]
 * 
 * Output: 3
 * 
 * Explanation: 
 * 1st move:    1     0 <-- 5    =>    1     1     4
 * 2nd move:    1 <-- 1 <-- 4    =>    2     1     3    
 * 3rd move:    2     1 <-- 3    =>    2     2     2   
 * 
 * 
 * Example2
 * 
 * Input: [0,3,0]
 * 
 * Output: 2
 * 
 * Explanation: 
 * 1st move:    0 <-- 3     0    =>    1     2     0    
 * 2nd move:    1     2 --> 0    =>    1     1     1     
 * 
 * 
 * Example3
 * 
 * Input: [0,2,0]
 * 
 * Output: -1
 * 
 * Explanation: 
 * It's impossible to make all the three washing machines have the same number
 * of dresses. 
 * 
 * 
 * 
 * 
 * Note:
 * 
 * The range of n is [1, 10000].
 * The range of dresses number in a super washing machine is [0, 1e5].
 * 
 * 
 */
/*
 * [517] Super Washing Machines
 *
 * https://leetcode.com/problems/super-washing-machines
 *
 * Hard (31.01%)
 * Total Accepted:    797
 * Total Submissions: 2536
 * Testcase Example:  '[1,0,5]'
 *
 * You have n super washing machines on a line. Initially, each washing machine
 * has some dresses or is empty. 
 * 
 * 
 * For each move, you could choose any m (1 ≤ m ≤ n) washing machines, and pass
 * one dress of each washing machine to one of its adjacent washing machines
 * at the same time .  
 * 
 * Given an integer array representing the number of dresses in each washing
 * machine from left to right on the line, you should find the minimum number
 * of moves to make all the washing machines have the same number of dresses.
 * If it is not possible to do it, return -1.
 * 
 * Example1
 * 
 * Input: [1,0,5]
 * 
 * Output: 3
 * 
 * Explanation: 
 * 1st move:    1     0 <-- 5    =>    1     1     4
 * 2nd move:    1 <-- 1 <-- 4    =>    2     1     3    
 * 3rd move:    2     1 <-- 3    =>    2     2     2   
 * 
 * 
 * Example2
 * 
 * Input: [0,3,0]
 * 
 * Output: 2
 * 
 * Explanation: 
 * 1st move:    0 <-- 3     0    =>    1     2     0    
 * 2nd move:    1     2 --> 0    =>    1     1     1     
 * 
 * 
 * Example3
 * 
 * Input: [0,2,0]
 * 
 * Output: -1
 * 
 * Explanation: 
 * It's impossible to make all the three washing machines have the same number
 * of dresses. 
 * 
 * 
 * 
 * 
 * Note:
 * 
 * The range of n is [1, 10000].
 * The range of dresses number in a super washing machine is [0, 1e5].
 * 
 * 
 */
class Solution {
public:
    int findMinMoves(vector<int>& machines) {
        int sum = 0, n = machines.size();
        for (auto& x : machines) sum += x;
        if (sum % n != 0) return -1;
        int k = sum / n;

        int i = 0, j = 0, cnt = 0;
        int x = -1, y = -1, move = 0;
        while (i < n && j < n) {
            while(machines[i] >= k && i<n) ++i;
            if (i == n) break;
            while(machines[j] <= k && j<n) ++j;
            if (j == n) break;

            int x2 = min(i, j), y2 = max(i, j);
            if (x2 <= y) {
                y = y2; 
            } else {
                x = x2; y = y2;
                cnt = 0;
            }

            int todo = min(k-machines[i], machines[j]-k);
            machines[i] += todo;
            machines[j] -= todo;

            cnt += todo;
            move = max(move, cnt);
        }

        return move;
    }
};


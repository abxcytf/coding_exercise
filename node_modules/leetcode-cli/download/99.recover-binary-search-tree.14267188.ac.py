#
# [99] Recover Binary Search Tree
#
# https://leetcode.com/problems/recover-binary-search-tree
#
# Hard (29.02%)
# Total Accepted:    68060
# Total Submissions: 234501
# Testcase Example:  '[0,1]'
#
# 
# Two elements of a binary search tree (BST) are swapped by mistake.
# 
# Recover the tree without changing its structure.
# 
# 
# Note:
# A solution using O(n) space is pretty straight forward. Could you devise a
# constant space solution?
# 
#
class Solution:
    # @param root, a tree node
    # @return a tree node
    def recoverTree(self, root):
        self.last = self.x1 = self.x2 = None
        self.find(root)
        v=self.x1.val
        self.x1.val=self.x2.val
        self.x2.val=v
        return root

    def find(self,n):
        if not n:
            return
        if n.left:
            self.find(n.left)

        if self.last and n.val < self.last.val:
            if not self.x1:
                self.x1 = self.last
            self.x2 = n
        self.last = n

        if n.right:
            self.find(n.right)

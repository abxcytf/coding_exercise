/*
 * [209] Minimum Size Subarray Sum
 *
 * https://leetcode.com/problems/minimum-size-subarray-sum
 *
 * Medium (29.23%)
 * Total Accepted:    71611
 * Total Submissions: 244965
 * Testcase Example:  '7\n[2,3,1,2,4,3]'
 *
 * 
 * Given an array of n positive integers and a positive integer s, find the
 * minimal length of a contiguous subarray of which the sum â‰¥ s. If there isn't
 * one, return 0 instead.
 * 
 * 
 * For example, given the array [2,3,1,2,4,3] and s = 7,
 * the subarray [4,3] has the minimal length under the problem constraint.
 * 
 * 
 * click to show more practice.
 * 
 * More practice:
 * 
 * If you have figured out the O(n) solution, try coding another solution of
 * which the time complexity is O(n log n).
 * 
 * 
 * Credits:Special thanks to @Freezen for adding this problem and creating all
 * test cases.
 */
class Solution {
public:
    int minSubArrayLen(int s, vector<int>& nums) {
        int n=nums.size(),i=0,j=0,m=0,x=n+1;
        while (i<=j && j<n) {
            do { m+=nums[j]; ++j; } while (m<s && j<n);
            if (m<s && j==n) break;
            do { m-=nums[i]; ++i; } while (m>=s && i<=j);
            if (j-i+1<x) x=j-i+1;
        }
        return (x==n+1) ? 0 : x;
    }
};

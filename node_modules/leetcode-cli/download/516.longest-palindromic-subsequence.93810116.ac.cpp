/*
 * [516] Longest Palindromic Subsequence
 *
 * https://leetcode.com/problems/longest-palindromic-subsequence
 *
 * Medium (40.67%)
 * Total Accepted:    1765
 * Total Submissions: 4338
 * Testcase Example:  '"bbbab"'
 *
 * 
 * Given a string s, find the longest palindromic subsequence's length in s.
 * You may assume that the maximum length of s is 1000.
 * 
 * 
 * Example 1:
 * Input: 
 * 
 * "bbbab"
 * 
 * Output: 
 * 
 * 4
 * 
 * One possible longest palindromic subsequence is "bbbb".
 * 
 * 
 * Example 2:
 * Input:
 * 
 * "cbbd"
 * 
 * Output:
 * 
 * 2
 * 
 * One possible longest palindromic subsequence is "bb".
 * 
 */
/*
 * [516] Longest Palindromic Subsequence
 *
 * https://leetcode.com/problems/longest-palindromic-subsequence
 *
 * Medium (40.67%)
 * Total Accepted:    1765
 * Total Submissions: 4338
 * Testcase Example:  '"bbbab"'
 *
 * 
 * Given a string s, find the longest palindromic subsequence's length in s.
 * You may assume that the maximum length of s is 1000.
 * 
 * 
 * Example 1:
 * Input: 
 * 
 * "bbbab"
 * 
 * Output: 
 * 
 * 4
 * 
 * One possible longest palindromic subsequence is "bbbb".
 * 
 * 
 * Example 2:
 * Input:
 * 
 * "cbbd"
 * 
 * Output:
 * 
 * 2
 * 
 * One possible longest palindromic subsequence is "bb".
 * 
 */
class Solution {
public:
    int find(const string &s, int i, int j, vector<vector<int>> &cache) {
        if (i > j) return 0;
        if (i == j) return 1;

        if (cache[i][j] > 0) return cache[i][j];

        int x = j - i + 1;
        if (s[i] == s[j])
            x = 2 + find(s, i+1, j-1, cache); 
        else
            x = max(find(s, i, j-1, cache), find(s, i+1, j, cache));

        cache[i][j] = x;
        return x;
    }
    int longestPalindromeSubseq(string s) {
        int n = s.size();
        vector<vector<int>> cache(n);
        for (auto& v: cache) v.resize(n);
        return find(s, 0, n-1, cache);
    }
};


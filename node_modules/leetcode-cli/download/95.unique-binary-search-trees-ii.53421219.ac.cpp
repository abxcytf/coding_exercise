/*
 * [95] Unique Binary Search Trees II
 *
 * https://leetcode.com/problems/unique-binary-search-trees-ii
 *
 * Medium (30.77%)
 * Total Accepted:    75688
 * Total Submissions: 245958
 * Testcase Example:  '3'
 *
 * Given an integer n, generate all structurally unique BST's (binary search
 * trees) that store values 1...n.
 * 
 * 
 * For example,
 * Given n = 3, your program should return all 5 unique BST's shown below.
 * 
 * 
 * 1         3     3      2      1
 * \       /     /      / \      \
 * 3     2     1      1   3      2
 * /     /       \                 \
 * 2     1         2                 3
 * 
 * 
 */
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    vector<TreeNode*> generateTrees(int n) {
        if (n==0) return vector<TreeNode*>();
        return go(1,n);
    }
    
    vector<TreeNode*> go(int x, int y) {
        vector<TreeNode*> v;
        if (x>y) { v.push_back(NULL); return v; }
        
        for (int j=x; j<=y; ++j) {
            auto lv = go(x,j-1);
            auto rv = go(j+1,y);
            for (auto l : lv) {
                for (auto r : rv) {
                    TreeNode *p = new TreeNode(j);
                    p->left = l;
                    p->right = r;
                    v.push_back(p);
                }
            }
        }
        return v;
    }
};
